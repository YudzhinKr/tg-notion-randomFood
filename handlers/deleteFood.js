// handlers/deleteFood.js

const deleteState = {}; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

const deleteFoodHandler = async (bot, msg, notion, mainKeyboard) => {
    const chatId = msg.chat.id;

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    deleteState[chatId] = { step: 'select_category' };

    await bot.sendMessage(chatId, '–í–∏–¥–∞–ª–µ–Ω–Ω—è ‚Äî –æ–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤—É:', {
        reply_markup: { remove_keyboard: true }, // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    });

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    await bot.sendMessage(chatId, 'üîª –û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–π–æ–º —ó–∂—ñ:', {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ó–∞–≤—Ç—Ä–∞–∫', callback_data: 'delete_category_–ó–∞–≤—Ç—Ä–∞–∫' }],
                [{ text: '–û–±—ñ–¥', callback_data: 'delete_category_–û–±—ñ–¥' }],
                [{ text: '–í–µ—á–µ—Ä—è', callback_data: 'delete_category_–í–µ—á–µ—Ä—è' }],
            ],
        },
    });
};

const handleDeleteCallback = async (bot, callbackQuery, notion, mainKeyboard) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const messageId = callbackQuery.message.message_id;

    // –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ Telegram, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ "loading..."
    await bot.answerCallbackQuery(callbackQuery.id);

    const state = deleteState[chatId];

    // –Ø–∫—â–æ —Å—Ç–∞–Ω—É –Ω–µ–º–∞—î –∞–±–æ –∫—Ä–æ–∫ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–æ–º—É, —ñ–≥–Ω–æ—Ä—É—î–º–æ
    if (!state) {
        // –ú–æ–∂–ª–∏–≤–æ, —Ü–µ callback –∑—ñ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        return bot.sendMessage(chatId, '–î—ñ—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.', mainKeyboard);
    }

    // –ö–†–û–ö 1: –í–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    if (state.step === 'select_category' && data.startsWith('delete_category_')) {
        const mealType = data.replace('delete_category_', '');
        state.mealType = mealType;
        state.step = 'select_food_item';

        await bot.editMessageText(`üîª –ü—Ä–∏–π–æ–º —ó–∂—ñ - ${mealType}.`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: { inline_keyboard: [] } // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∫–Ω–æ–ø–∫–∏
        });

        const foodItems = await getFoodItemsFromNotion(notion, mealType);

        if (foodItems.length === 0) {
            delete deleteState[chatId]; // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
            return bot.sendMessage(chatId, `‚ùå –£ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "**${mealType}**" –Ω–µ–º–∞—î —Å—Ç—Ä–∞–≤.`, mainKeyboard);
        }

        const inlineButtons = foodItems.map(item => [{ text: item.name, callback_data: `delete_food_id_${item.id}` }]);
        inlineButtons.push([{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π', callback_data: 'delete_go_back_category' }]); // –ö–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥"

        await bot.sendMessage(chatId, 'ü•ó –û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', {
            reply_markup: { inline_keyboard: inlineButtons },
        });
        return;
    }

    // –ö–†–û–ö 2: –í–∏–±—ñ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å—Ç—Ä–∞–≤–∏
    if (state.step === 'select_food_item' && data.startsWith('delete_food_id_')) {
        const pageId = data.replace('delete_food_id_', '');
        state.pageId = pageId;
        state.step = 'confirm_deletion';

        // –ú–æ–∂–Ω–∞ –¥—ñ—Å—Ç–∞—Ç–∏ –Ω–∞–∑–≤—É —Å—Ç—Ä–∞–≤–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        const foodName = callbackQuery.message.reply_markup.inline_keyboard
            .flat()
            .find(btn => btn.callback_data === data)?.text || '–≤–∏–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–≤–∞';


        await bot.editMessageText(`ü•ó –í–∏ –æ–±—Ä–∞–ª–∏: ${foodName}.`, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: { inline_keyboard: [] } // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∫–Ω–æ–ø–∫–∏
        });

        await bot.sendMessage(chatId, `‚ùì –í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—Ä–∞–≤—É "${foodName}"?`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úÖ –¢–∞–∫', callback_data: 'delete_confirm_yes' }, { text: '‚ùå –ù—ñ', callback_data: 'delete_confirm_no' }],
                    
                ],
            },
        });
        return;
    }

    // –ö–†–û–ö 3: –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    if (state.step === 'confirm_deletion') {
        if (data === 'delete_confirm_yes') {
            try {
                if (!state.pageId) {
                    throw new Error('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.');
                }
                await notion.pages.update({
                    page_id: state.pageId,
                    archived: true, // –ê—Ä—Ö—ñ–≤–∞—Ü—ñ—è –∑–∞–º—ñ—Å—Ç—å –ø–æ–≤–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                });
                delete deleteState[chatId]; // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è —É—Å–ø—ñ—Ö—É
                await bot.sendMessage(chatId, '‚úÖ –°—Ç—Ä–∞–≤—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.', mainKeyboard);
            } catch (error) {
                console.error('üö® –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å—Ç—Ä–∞–≤–∏ –≤ Notion:', error);
                delete deleteState[chatId]; // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
                await bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å—Ç—Ä–∞–≤–∏: ${error.message}`, mainKeyboard);
            }
        } else if (data === 'delete_confirm_no') {
            delete deleteState[chatId]; // –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ
            await bot.sendMessage(chatId, '‚Ü©Ô∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.', mainKeyboard);
        }
        return;
    }

    // –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"
    if (data === 'delete_go_back_category') {
        deleteState[chatId] = { step: 'select_category' }; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –ø–µ—Ä—à–æ–≥–æ –∫—Ä–æ–∫—É
        await bot.editMessageText('‚Ü©Ô∏è –û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–π–æ–º —ó–∂—ñ:', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ó–∞–≤—Ç—Ä–∞–∫', callback_data: 'delete_category_–ó–∞–≤—Ç—Ä–∞–∫' }],
                    [{ text: '–û–±—ñ–¥', callback_data: 'delete_category_–û–±—ñ–¥' }],
                    [{ text: '–í–µ—á–µ—Ä—è', callback_data: 'delete_category_–í–µ—á–µ—Ä—è' }],
                ],
            },
        });
        return;
    }
};

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç—Ä–∞–≤ –∑ Notion
async function getFoodItemsFromNotion(notion, mealType) {
    try {
        const response = await notion.databases.query({
            database_id: process.env.NOTION_DB_ID,
            filter: {
                property: '–ü—Ä–∏–π–æ–º —ó–∂—ñ',
                select: { equals: mealType },
            },
        });
        return response.results.map(page => ({
            id: page.id,
            name: page.properties['–ù–∞–∑–≤–∞ —Å—Ç—Ä–∞–≤–∏'].title[0]?.plain_text || '–ë–µ–∑ –Ω–∞–∑–≤–∏',
        }));
    } catch (error) {
        console.error('üö® –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç—Ä–∞–≤ –∑ Notion:', error);
        return [];
    }
}

module.exports = {
    deleteFoodHandler,
    handleDeleteCallback,
    deleteState, // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ deleteState –¥–ª—è tg-bot.js
};