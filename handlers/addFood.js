// handlers/addFood.js

const userState = {}; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç—É—Ç

const handleAddFood = async (bot, msg, userState, notion, mainKeyboard) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const state = userState[chatId];

  // –°—Ç–∞—Ä—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –ø—Ä–∏–π–æ–º—É —ó–∂—ñ
  if (text === '‚ûï –î–æ–¥–∞—Ç–∏ —Å—Ç—Ä–∞–≤—É') {
    userState[chatId] = { step: 'select_meal' };

    await bot.sendMessage(chatId, 'üìù  –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–∏—à–µ–º–æ –Ω–æ–≤—É —Å—Ç—Ä–∞–≤—É.', {
      reply_markup: { remove_keyboard: true },
    });
  
    // 2. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    return bot.sendMessage(chatId, ' –û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–π–æ–º —ó–∂—ñ:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ó–∞–≤—Ç—Ä–∞–∫', callback_data: 'meal_breakfast' }],
          [{ text: '–û–±—ñ–¥', callback_data: 'meal_lunch' }],
          [{ text: '–í–µ—á–µ—Ä—è', callback_data: 'meal_dinner' }],
        ],
      },
    });
  }

  if (!state) return;

  switch (state.step) {
    case 'enter_name':
      state.name = text;
      state.step = 'enter_calories';
      return bot.sendMessage(chatId, '‚ö°Ô∏è –í–≤–µ–¥—ñ—Ç—å –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å (—á–∏—Å–ª–æ):');

    case 'enter_calories':
      const calories = parseInt(text, 10);
      if (isNaN(calories)) {
        return bot.sendMessage(chatId, '‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –∫–∞–ª–æ—Ä—ñ–π–Ω–æ—Å—Ç—ñ.');
      }
      state.calories = calories;
      state.step = 'enter_proteins';  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –±—ñ–ª–∫—ñ–≤
      return bot.sendMessage(chatId, 'üçó –°–∫—ñ–ª—å–∫–∏ –≥—Ä–∞–º—ñ–≤ –±—ñ–ª–∫—ñ–≤ —É —Å—Ç—Ä–∞–≤—ñ? (—á–∏—Å–ª–æ):');

    case 'enter_proteins':
      const proteins = parseInt(text, 10);
      if (isNaN(proteins)) {
        return bot.sendMessage(chatId, '‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –±—ñ–ª–∫—ñ–≤.');
      }
      state.proteins = proteins;
      state.step = 'enter_ingredients';  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤
      return bot.sendMessage(chatId, 'üìã –í–≤–µ–¥—ñ—Ç—å —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É):');

    case 'enter_ingredients':
      state.ingredients = text;

      // –î–æ–¥–∞—î–º–æ —É Notion
      try {
        await notion.pages.create({
          parent: { database_id: process.env.NOTION_DB_ID },
          properties: {
            '–ù–∞–∑–≤–∞ —Å—Ç—Ä–∞–≤–∏': {
              title: [{ text: { content: state.name } }],
            },
            '–ü—Ä–∏–π–æ–º —ó–∂—ñ': {
              select: { name: state.mealType },
            },
            '–ö–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å': {
              number: state.calories,
            },
            '–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏': {
              rich_text: [{ text: { content: state.ingredients } }],
            },
            '–ë—ñ–ª–∫–∏': {
              number: state.proteins,
            },
          },
        });

        delete userState[chatId];
        return bot.sendMessage(chatId, `‚úÖ –°—Ç—Ä–∞–≤—É "${state.name}" –¥–æ–¥–∞–Ω–æ!`, mainKeyboard);
      } catch (error) {
        console.error('üö® –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞–≤–∏ –≤ Notion:', error.message);
        return bot.sendMessage(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Å—Ç—Ä–∞–≤–∏: ${error.message}`, mainKeyboard);
      }

    default:
      break;
  }
}; // <-- –û—Å—å —Ç—É—Ç –∑–∞–∫—Ä–∏–≤–∞—î—Ç—å—Å—è handleAddFood

// –û–±—Ä–æ–±–∫–∞ callbackQuery –¥–ª—è –≤–∏–±–æ—Ä—É –ø—Ä–∏–π–æ–º—É —ó–∂—ñ
const handleCallbackQuery = (bot, callbackQuery, userState) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  if (!userState[chatId] || userState[chatId].step !== 'select_meal') {
    return bot.answerCallbackQuery(callbackQuery.id);
  }

  const mealMap = {
    meal_breakfast: '–ó–∞–≤—Ç—Ä–∞–∫',
    meal_lunch: '–û–±—ñ–¥',
    meal_dinner: '–í–µ—á–µ—Ä—è',
  };

  if (!mealMap[data]) {
    return bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä' });
  }

  userState[chatId].mealType = mealMap[data];
  userState[chatId].step = 'enter_name';

  bot.answerCallbackQuery(callbackQuery.id);
  return bot.sendMessage(chatId, 'ü•ó –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å—Ç—Ä–∞–≤–∏:');
};

module.exports = {
  addFoodHandler: handleAddFood,
  handleCallbackQuery,
  userState,
};
